% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/median-count-tolerable.R
\name{median_count_tolerable}
\alias{median_count_tolerable}
\title{How many \code{NA}s can be tolerated for a median estimate?}
\usage{
median_count_tolerable(x, needs_prep = TRUE)
}
\arguments{
\item{x}{A numeric vector or similar.}

\item{needs_prep}{Logical. Ignore unless the function is used as a helper.
See details.}
}
\value{
Integer (length 1). Never \code{NA}, never negative.
}
\description{
\code{median_count_tolerable()} returns the number of missing values
that can be preserved while determining the median.

The point is to retain as many data points as possible when looking for a
median estimate, instead of simply ignoring all \code{NA}s.
}
\details{
With the default \code{needs_prep = TRUE}, missing values will be removed
from \code{x}, and \code{x} will be sorted. If this was already done elsewhere,
setting \code{needs_prep} to \code{FALSE} allows you to avoid redundancy and
inefficiency. Proceed with caution as this is not checked! If you don't get
this right, the function may silently return wrong results.

The main purpose of \code{needs_prep} is to speed up \code{\link[=median_table]{median_table()}}, which
uses the present function as a helper. Although both are exported,
\code{median_table()}, is generally more useful.
}
\examples{
# With two or fewer `NA`s, the median can only be `8`,
# so these `NA`s are tolerated:
median_count_tolerable(c(8, 8, 8, NA, NA))

# When adding a third `NA`, the median will be unknown.
# Compare using naidem's correct median function:
median2(c(8, 8, 8, NA, NA))
median2(c(8, 8, 8, NA, NA, NA))

# No `NA`s are tolerable here because
# a single one could change the median:
median_count_tolerable(c(8, 9, 9, NA, NA, NA))

# Here too, the median depends on the value behind `NA`,
# so the `NA` cannot be tolerated:
median_count_tolerable(c(8, 9, NA))
}
