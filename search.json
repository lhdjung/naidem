[{"path":"https://lhdjung.github.io/naidem/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lhdjung.github.io/naidem/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://lhdjung.github.io/naidem/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://lhdjung.github.io/naidem/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://lhdjung.github.io/naidem/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://lhdjung.github.io/naidem/articles/algorithm.html","id":"median-pseudo-code","dir":"Articles","previous_headings":"","what":"Median pseudo-code","title":"Implementing the algorithm","text":"","code":"# 1. Count the elements of `x`. n := length(x)  # 2. Sort `x` after removing missing values from it. x := sort(keep_known(x))  # 3. Infer the number of missing values. nna := n - length(x)  # For odd-length arrays: if n mod 2 == 1:        # 4. Determine the central index of `x` (including missing values).    half := n / 2 - 0.5        # 5. If the missing values could potentially form a block    # that starts at one end and extends into the central position,    # the median is uncertain.    if nna > half:       return NA        # 6. Check values at two specific indices for equality.    # If they are equal, return the central `x` value,    # which is the median in this case.    if x[half - nna] == x[half]:       return x[half]        # 7. If they are not equal, return a missing value.    return NA     # For even-length arrays: else:        # 4a. Determine the upper central index of `x`.    half_2 := n / 2        # 4b. Determine the lower central index.    half_1 := half_2 - 1        # 5. If the missing values could potentially form a block    # that starts at one end and extends into either central position,    # the median is uncertain.    if nna > half_1:       return NA        # 6. Check whether both pairs are equal.    # If they are, return the mean of the two central    # values (which is equal to each member of the pair).    if x[half_1 - nna] == x[half_1] && x[half_2 - nna] == x[half_2]:       return x[half_1]        # 7. If one or both are not equal, return a missing value.    return NA"},{"path":"https://lhdjung.github.io/naidem/articles/algorithm.html","id":"explanation","dir":"Articles","previous_headings":"","what":"Explanation","title":"Implementing the algorithm","text":"Missing values may may make impossible determine median. Implementations median check whether given input, rather simply assuming every time. algorithm checks whether putative median can changed shift due missing values. , median depends positions missing elements within sorted array — thus, values. Since unknown, median determined. However, median remains shift, indifferent missing values: median identical possible values behind missing ones. See Proving algorithm details. Subtraction used shift x still indexed half (midpoint input x) even though missing values already removed x point. Therefore, x[half] necessarily midpoint x. maximum possible number steps missing values can shift median total number missing values (nna), quantity subtracted. practice, might important use “safe” comparison step 6. Exact equality high bar floating-point numbers can spurious differences . example, 0.1 + 0.2 == 0.3 false deep technical reasons place context, need functions disregard artifacts. However, problem occur comparing integers, testing exact equality safe case. Median algorithms generally simple arrays odd length. includes cases missing values present. even-length sub-algorithm operates two central indices instead one even-length arrays single central value. algorithm needs compare x indices respective value offset nna. way, effectively checks whether pair x values central indices offset case equal pair without offset. , two values , need compute average, x[half_1] returned. step 5, sub-algorithms return NA nna greater half half_1, respectively. even-length case, half_1 needs tested less half_2, less nna whenever half_2 . return NA ? Imagine uninterrupted sequence missing values start end array. extends central position(s), least one central value missing. case ruled , median unknown. Furthermore, returning allow negative indices step 6. aside, median2() even argument allows users opt value just median length array even. effect x contains missing values: median can determined case, equal values around .","code":""},{"path":"https://lhdjung.github.io/naidem/articles/algorithm.html","id":"r-details","dir":"Articles","previous_headings":"","what":"R details","title":"Implementing the algorithm","text":"R implementation naidem::median2() succinct pseudo-code, condensing much two sub-algorithms one. vectorization R allows code de-emphasizes difference length. elegant code plays strengths R, look little different . R connoisseurs asked patience pedestrian languages might need explicit instructions. , note pseudo-code uses zero-indexing R uses one-indexing. nna >= half median2() casts broader net nna > half . offset comparison near(x[half - nna], x[half]) wrapped isTRUE((.)), () reduces two logical test results one input even length. (near() .) comparison possible median values returns either NA FALSE, isTRUE() wrapping returns FALSE function returns NA median determined certainty. isTRUE() return TRUE comparisons . number either 1 2: recall half object either length 1 (index median odd-length vector) 2 (indices two values right median even-length vector). median can determined even-length scenario, equal values around . function returns x[half[1L]], .e., first two values. odd-length vector, index redundant half[1L] equals half. Thus, x[half[1L]] correct return value whenever median can determined, regardless length vector. Note use near(), adapted dplyr::near() without depending dplyr. Consistent explanation , near() compares two numeric vectors disregarding spurious floating-point differences == take seriously (see also R Data Science point). near(0.1 + 0.2, 0.3) TRUE even though 0.1 + 0.2 == 0.3 FALSE. Nevertheless, == used elsewhere median2() comparing integers, problem.","code":""},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-for-odd-lengths","dir":"Articles","previous_headings":"","what":"Proof for odd lengths","title":"Proving the algorithm","text":"median midpoint sorted x distribution, includes missing values — .e., x[half] step: Sorted missing observations still unknown, purpose make statements possible values might : logical values important . describe two possible ways x might ordered — known values less missing values, reverse:","code":"half := length(x) / 2 - 0.5 nna := length(keep_missing(x)) x := sort(x) sorted_na := keep_missing(x) sorted_known := keep_known(x) all_known_values_less := sorted_known[length(sorted_known) - 1] < sorted_na[0] all_missing_values_less := sorted_na[length(sorted_na) - 1] < sorted_known[0]"},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-of-step-3","dir":"Articles","previous_headings":"Proof for odd lengths","what":"Proof of step 3","title":"Proving the algorithm","text":"missing known values, true order x might one missings median. Even , however, way know data.","code":"if nna > half:     length(sorted_na) > length(sorted_known)     if all_known_values_less || all_missing_values_less:         is_missing(x[half])"},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-of-step-5","dir":"Articles","previous_headings":"Proof for odd lengths","what":"Proof of step 5","title":"Proving the algorithm","text":"Consider two extreme cases: known values less missing values, thus, median equal vector known values indexed midpoint entire input x vector: missing values less known values, thus, median equal vector known values indexed midpoint x offset number missing values: two points put bounds median: Thus, equal, also equal median. bounds equal, however, either median, addition values might exist . case, least two different possible medians, renders true median unknown: Whenever median can determined, equivalent median sorted_known. words, algorithm returns non-NA value, value equal median x removing missing values :","code":"if all_known_values_less:     x[half] == sorted_known[half] if all_missing_values_less:     x[half] == sorted_known[half - nna] sorted_known[half - nna] <= x[half] <= sorted_known[half] if sorted_known[half - nna] == sorted_known[half]:     sorted_known[half] == x[half]     set possible_medians == { sorted_known[half] }   else:     set possible_medians == { sorted_known[half - nna]; ...; sorted_known[half] } sorted_known_median := sorted_known[length(sorted_known) / 2 - 0.5] sorted_known[half - nna] <= sorted_known_median <= sorted_known[half]  if sorted_known[half - nna] == sorted_known[half]:     sorted_known[half] == x[half]     sorted_known[half] == sorted_known_median     set possible_medians == { sorted_known_median }   else:     set possible_medians == { sorted_known[half - nna]; ...; sorted_known[half] }"},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-for-even-lengths","dir":"Articles","previous_headings":"","what":"Proof for even lengths","title":"Proving the algorithm","text":"definitions , except fact two midpoints : target quantity mean two midpoints:","code":"half_2 := length(x) / 2 half_1 := half_2 - 1 nna := length(keep_missing(x)) x := sort(x) sorted_na := keep_missing(x) sorted_known := keep_known(x) all_known_values_less := sorted_known[length(sorted_known) - 1] < sorted_na[0] all_missing_values_less := sorted_na[length(sorted_na) - 1] < sorted_known[0] (x[half_1] + x[half_2]) / 2"},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-of-step-4","dir":"Articles","previous_headings":"Proof for even lengths","what":"Proof of step 4","title":"Proving the algorithm","text":"half x values missing, might include half_1 half_2. Either missing, assuming sequences known missing values don’t alternate. can’t rule , ’s unknown whether ’s case. Since unknown whether least one half_1 half_2 missing, possible determine . Therefore, median unknown well, since half_1 half_2 jointly form basis computing :","code":"if nna > half_1:     length(sorted_na) > length(sorted_known)     if all_known_values_less || all_missing_values_less:         is_missing(x[half_1]) || is_missing(x[half_2])         is_missing((x[half_1] + x[half_2]) / 2)"},{"path":"https://lhdjung.github.io/naidem/articles/proof.html","id":"proof-of-step-6","dir":"Articles","previous_headings":"Proof for even lengths","what":"Proof of step 6","title":"Proving the algorithm","text":"Analogous case (1) proof odd lengths: Analogous case (2): previous proof, extremes put bounds midpoints: pairs extremes need equal, else least two possible medians, true median unknown: return value can simplified (sorted_known[half_1] + sorted_known[half_2]) / 2 x[half_1]: consequence, one value possible x[half_1] x[half_2] given missing values. , turn, contradicts basic premise two values around median remains equal offset nna. premise false, however, median determined, shown . half_1 half_2 must equal order median determined, since mean two equal values equal , median equal x[half_1] x[half_2]. median even-length distribution missing values can determined , algorithm can simply return x[half_1] instead (x[half_1] + x[half_2]) / 2. Simplifying algorithm way makes efficient.","code":"if all_known_values_less:     x[half_1] == sorted_known[half_1]     x[half_2] == sorted_known[half_2] if all_missing_values_less:     x[half_1] == sorted_known[half_1 - nna]     x[half_2] == sorted_known[half_2 - nna] sorted_known[half_1 - nna] <= x[half_1] <= sorted_known[half_1] sorted_known[half_2 - nna] <= x[half_2] <= sorted_known[half_2] if sorted_known[half_1 - nna] == sorted_known[half_1] &&    sorted_known[half_2 - nna] == sorted_known[half_2]:       (sorted_known[half_1] + sorted_known[half_2]) / 2 == (x[half_1] + x[half_2]) / 2       set possible_medians == { (sorted_known[half_1] + sorted_known[half_2]) / 2 }    else:       set possible_medians == {          (sorted_known[half_1 - nna] + sorted_known[half_2 - nna]) / 2;         ...;         (sorted_known[half_1] + sorted_known[half_2]) / 2       } # Two general reminders: nna > 0 sorted_known[half_2 - 1] == sorted_known[half_1]  if sorted_known[half_1 - nna] == sorted_known[half_1] &&    sorted_known[half_2 - nna] == sorted_known[half_2]:      # Is this possible?      if sorted_known[half_1] != sorted_known[half_2]:           sorted_known[half_2 - 1] != sorted_known[half_2]           # It isn't, because the median would then depend           # on the missing values' position within           # the rank order:           if all_known_values_less:                x[half_1] < (x[half_1] + x[half_2]) / 2 < x[half_2]           if all_missing_values_less:                x[half_1] <= (x[half_1] + x[half_2]) / 2 <= x[half_2]"},{"path":"https://lhdjung.github.io/naidem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Jung. Author, maintainer. R Core Team. Contributor.           code documentation copied","code":""},{"path":"https://lhdjung.github.io/naidem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jung L (2025). naidem: Median Missing Values Analysis. R package version 0.1.0.9000, https://github.com/lhdjung/naidem.","code":"@Manual{,   title = {naidem: Median with Missing Values Analysis},   author = {Lukas Jung},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/lhdjung/naidem}, }"},{"path":"https://lhdjung.github.io/naidem/index.html","id":"median-with-missing-values-analysis","dir":"","previous_headings":"","what":"Median with Missing Values Analysis","title":"Median with Missing Values Analysis","text":"goal naidem compute median way handles missing values properly: checking whether NAs render median unknown quantifying uncertainty arising . contains: median2() drop-replacement median(). returns NA median can’t determined data. median_table() quantify uncertainty around median estimate. ignores many NAs needed, simply . output includes lower upper bounds median, many NAs ignored, etc. median_plot_errorbar() follow-visualizations.","code":""},{"path":"https://lhdjung.github.io/naidem/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Median with Missing Values Analysis","text":"can install development version naidem like :","code":"remotes::install_github(\"lhdjung/naidem\")"},{"path":"https://lhdjung.github.io/naidem/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Median with Missing Values Analysis","text":"Base R’s median() function returns NA whenever input vector contains one NAs. many cases, missing values make impossible compute median. Yet distributions clear median even : actual median beta 7, irrespective true value behind NA. Use median2() distinguish cases: Compare NA^0, returns 1 even though NA^2 returns NA. also makes NA meaningful returned: users can sure median really unknown. See Implementing algorithm information naidem’s solution. median really unknown, like ? Call median_table() get sense uncertainty around median known values: Visualize lower upper bounds median estimate using median_plot_errorbar():  precise value alpha unknown, bound fall bars. Since median beta known, bars expanded, marked certain ring around point. Also, median_table() counts many missing values need ignored determine median remaining values. balances need knowledge central tendency appreciation uncertainty. Make apparent median_plot_col(). bars shown beta NA need ignored:","code":"library(naidem) alpha <- c(3, 4, 4, 5, NA, NA) beta <- c(6, 7, 7, 7, NA)  median(alpha) #> [1] NA median(beta) #> [1] NA median2(alpha) #> [1] NA median2(beta) #> [1] 7 df1 <- median_table(list(alpha = alpha, beta = beta)) df1 #> # A tibble: 2 × 10 #>   term  estimate certainty lower upper na_ignored na_total rate_ignored_na #>   <chr>    <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #> 1 alpha        4 FALSE       3.5   4.5          1        2             0.5 #> 2 beta         7 TRUE        7     7            0        1             0   #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl> median_plot_errorbar(df1) median_plot_col(df1)"},{"path":"https://lhdjung.github.io/naidem/index.html","id":"about-this-package","dir":"","previous_headings":"","what":"About this package","title":"Median with Missing Values Analysis","text":"“naidem” “median” backwards, also expresses goal treating NA (idem) conceptual way R language primitives like ^ . Note naidem imputation , simply determining median. moder package serves similar purpose, mode instead median. Working moder provided impetus behind naidem.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounds on an unknown median — median-bounds","title":"Bounds on an unknown median — median-bounds","text":"median_bounds() computes minimal maximal possible median values. helpful median2() returns NA: median determined, least might lower upper bounds. used within median_table() compute lower upper columns.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounds on an unknown median — median-bounds","text":"","code":"median_bounds(x, na.rm.amount = 0, even = c(\"mean\", \"low\", \"high\"), nna = NULL)  # Default S3 method median_bounds(x, na.rm.amount = 0, even = c(\"mean\", \"low\", \"high\"), nna = NULL)"},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounds on an unknown median — median-bounds","text":"x Vector can ordered using sort(). searched possible medians. na.rm.amount, even Passed median2(). nna Integer. Ignore unless function used helper. like needs_prep median_count_tolerable() except can submit number missing values.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounds on an unknown median — median-bounds","text":"Vector length 2. type double x numeric (double integer). Otherwise, type x.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bounds on an unknown median — median-bounds","text":"Two edge cases may occur: median can precisely determined, median_bounds() returns two identical values. case median2() return non-NA value, median_plot_errorbar() show \"ring certainty\". number missing values high continuous array extend start end x median position, data constrict median fall finite bounds. function return c(NA, NA) (appropriate type) array NAs act tunnel negative positive infinity, enabling median assume indefinitely low high values. second case, c(NA, NA) means bounds, existing bounds unknown. unfortunate necessary: although c(-Inf, Inf) appropriate conceptually, always type double, lead coercion bugs combined non-numeric data, possible median_table(). illustrate, try c(\"abc\", Inf). Like median2(), function generic, methods can defined classes. documentation describes default method.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bounds on an unknown median — median-bounds","text":"Lukas Jung, R Core Team","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounds on an unknown median — median-bounds","text":"","code":"# Lower and upper bounds can be found, # even though the precise median is unknown: median_bounds(c(7, 7, 8, 9, NA)) #> [1] 7 8 median_bounds(c(7, 7, 7, 8, 9, 9, NA, NA)) #> [1] 7.0 8.5  # Too many missing values, so there is no finite range: median_bounds(c(7, 7, 8, 9, NA, NA, NA, NA)) #> [1] NA NA"},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize median estimate uncertainty — median-plot-estimate","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"median_plot_errorbar() visualizes results median_table(). shows lower upper median bounds using error bars. Median estimates displayed points. median_plot_pointrange() variant uses simple lines instead error bars.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"","code":"median_plot_errorbar(   data,   point_color = line_color,   point_size = 2,   line_color = \"black\",   line_width = 0.5,   bar_width = 0.9 )  median_plot_pointrange(   data,   point_color = line_color,   point_size = 2,   line_color = \"black\",   line_width = 0.5 )"},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"data Data frame returned median_table(). point_color String (length 1). Color estimate points, including \"ring certainty\". default, line_color. point_size Numeric. Size median estimate points. Default 2. line_color String (length 1). Color error bars. Default \"black\". line_width Numeric (length 1). Width error bar lines. Default 0.5. bar_width Numeric (length 1). used median_plot_errorbar(). Extension horizontal bars. Default 0.9.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"ggplot object.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":"visual-guide","dir":"Reference","previous_headings":"","what":"Visual guide","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"Points medians non-NA values. Points known true medians \"ring certainty\" around . Error bars (just vertical lines) display lower upper bounds true median, reflecting uncertainty created missing values. median known fall range, even exact value unknown. bounds can found sample many missing values, error bars span height plot, point hexagram. median particularly uncertain case even confined range. See median_bounds().","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median-plot-estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize median estimate uncertainty — median-plot-estimate","text":"","code":"# Example data: data <- median_table(   list(     c(0, 1, 1, 1, NA),     c(1, 1, NA),     c(1, 2, NA),     c(0, 0, NA, 0, 0),     c(1, 1, 1, 1, NA, NA),     c(1, 1, 1, 1, NA, NA, NA),     c(1, 1, 1, 1, NA, NA, NA, NA),     iris$Sepal.Length,     c(5.6, 5.7, 5.9, 6, 6.1, 6.3, 6.4, 6.6, 6.7, NA),     c(6.1, 6.3, 5.9, 6, 6.1, 6.3, 6.4, 6.6, 6.7, NA, NA, NA, NA),     c(7, 7, 7, 8, NA, NA)   ) )  data #> # A tibble: 11 × 10 #>    term  estimate certainty lower upper na_ignored na_total rate_ignored_na #>    <chr>    <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #>  1 \"\"         1   TRUE       1      1            0        1            0    #>  2 \"\"         1   TRUE       1      1            0        1            0    #>  3 \"\"         1.5 FALSE      1      2            1        1            1    #>  4 \"\"         0   TRUE       0      0            0        1            0    #>  5 \"\"         1   TRUE       1      1            0        2            0    #>  6 \"\"         1   TRUE       1      1            0        3            0    #>  7 \"\"         1   FALSE     NA     NA            1        4            0.25 #>  8 \"\"         5.8 TRUE       5.8    5.8          0        0            0    #>  9 \"\"         6.1 FALSE      6.05   6.2          1        1            1    #> 10 \"\"         6.3 FALSE      6.1    6.4          4        4            1    #> 11 \"\"         7   FALSE      7      7.5          1        2            0.5  #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl>  # -- Some medians are known: \"ring of certainty\" and no # error bar expansion. # -- Some medians are unknown but confined to a range. # -- One median doesn't even have a range, its error bars # extend into infinity, and its point is a hexagram. median_plot_errorbar(data)   # Very similar but simpler plot: median_plot_pointrange(data)"},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop-in replacement for median() — median2","title":"Drop-in replacement for median() — median2","text":"median2() computes sample median. default, works like median() base R, exceptions: one values missing, median2() checks median can determined nevertheless. median() always returns NA case, median2() returns NA median genuinely unknown. can opt ignore certain number missing values using na.rm.amount na.rm.arguments. Factors data can ordered sort() allowed. However, non-numeric data, including dates factors, require one even = \"low\" even = \"high\". avoids \"computing mean\" two central values sorted vectors even length operation possible, e.g., strings. return type always double input vector numeric (.e., double integer). consistent predictable, regardless length even odd.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop-in replacement for median() — median2","text":"","code":"median2(   x,   na.rm = FALSE,   na.rm.amount = 0,   na.rm.from = c(\"first\", \"last\", \"random\"),   even = c(\"mean\", \"low\", \"high\"),   ... )  # Default S3 method median2(   x,   na.rm = FALSE,   na.rm.amount = 0,   na.rm.from = c(\"first\", \"last\", \"random\"),   even = c(\"mean\", \"low\", \"high\"),   ... )"},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop-in replacement for median() — median2","text":"x Vector can ordered using sort(). searched median. na.rm Logical. set TRUE, missing values removed computation proceeds. Default FALSE. na.rm.amount Numeric. Alternative na.rm removes specified number missing values. Default 0. na.rm.String. na.rm.amount used, position x missing values removed? Options \"first\", \"last\", \"random\". Default \"first\". even String. return x even length contains missing values (removed). default, \"mean\", averages two central values sorted vector, \"low\" returns lower central value, \"high\" returns higher one. Note \"mean\" allowed x numeric. ... Optional arguments methods. used default method.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop-in replacement for median() — median2","text":"Length-1 vector type double input numeric, type x otherwise. tested .numeric(), factors dates count numeric.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop-in replacement for median() — median2","text":"median2() generic function, new methods can defined . stats::median() base R, default method described work classes median reasonable concept (e.g., \"Date\"). new method necessary, please make sure deals missing values like default method . See Implementing algorithm details.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop-in replacement for median() — median2","text":"Lukas Jung, R Core Team","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop-in replacement for median() — median2","text":"","code":"# If no values are missing, # it works mostly like `median()`: median(1:4) #> [1] 2.5 median2(1:4) #> [1] 2.5  median(c(1:3, 100, 1000)) #> [1] 3 median2(c(1:3, 100, 1000)) #> [1] 3  # With some `NA`s, the median can # sometimes still be determined... median2(c(0, 1, 1, 1, NA)) #> [1] 1 median2(c(0, 0, NA, 0, 0, NA, NA)) #> [1] 0  # ...unless there are too many `NA`s... median2(c(0, 1, 1, 1, NA, NA)) #> [1] NA  # ...or too many unique values: median2(c(0, 1, 2, 3, NA)) #> [1] NA"},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":null,"dir":"Reference","previous_headings":"","what":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"median_count_tolerable() returns number missing values can preserved determining median. point retain many data points possible, instead simply ignoring NAs. based number known values, NAs might . used within median_table() determine many missing values need ignored.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"","code":"median_count_tolerable(x, needs_prep = TRUE)"},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"x numeric vector similar. needs_prep Logical. Ignore unless function used helper. See details.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"Integer (length 1). Never NA, never negative.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"default needs_prep = TRUE, missing values removed x, x sorted. already done elsewhere, setting needs_prep FALSE efficient. Proceed caution checked.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_count_tolerable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How many NAs can be tolerated for a median estimate? — median_count_tolerable","text":"","code":"# With two or fewer `NA`s, the median can only be `8`, # so these `NA`s are tolerated: median_count_tolerable(c(8, 8, 8, NA, NA)) #> [1] 2  # When adding a third `NA`, the median will be unknown. # Compare using naidem's correct median function: median2(c(8, 8, 8, NA, NA)) #> [1] 8 median2(c(8, 8, 8, NA, NA, NA)) #> [1] NA  # No `NA`s are tolerable here because # a single one could change the median: median_count_tolerable(c(8, 9, 9, NA, NA, NA)) #> [1] 0  # Here too, the median depends on the value behind `NA`, # so the `NA` cannot be tolerated: median_count_tolerable(c(8, 9, NA)) #> [1] 0"},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize rates of ignored NAs — median_plot_col","title":"Visualize rates of ignored NAs — median_plot_col","text":"median_plot_col() visualizes results median_table(). shows rates missing values ignored estimate median remaining values.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize rates of ignored NAs — median_plot_col","text":"","code":"median_plot_col(   data,   bar_alpha = 0.8,   bar_color_na = \"#F77774\",   bar_color_all = \"#747DF7\",   ring_color = \"black\",   ring_size = 8,   show_ring = TRUE,   show_legend = TRUE )"},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize rates of ignored NAs — median_plot_col","text":"data Data frame returned median_table(). bar_alpha Numeric. Opacity bars. Default 0.4. bar_color_na, bar_color_all Strings. Colors bars representing number missing values ignored share missing values (_na) entire sample (_all). ring_color String. Color \"ring certainty\" half circle. Default \"black\". ring_size Numeric. Size \"ring certainty\" half circle. Default 8. show_ring Logical. samples known median marked \"ring certainty\" half circle? Default TRUE. show_legend Logical. legend displayed? Default TRUE. Note: legend bars.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize rates of ignored NAs — median_plot_col","text":"ggplot object.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":"visual-guide-default-","dir":"Reference","previous_headings":"","what":"Visual guide (default)","title":"Visualize rates of ignored NAs — median_plot_col","text":"Red bars show share missing values ignored share missing values. Blue bars show share values, missing . cover part blue bars; types bars start zero. y-axis fixed 0 1 consistent display proportions. Samples without bar require ignoring NAs, median known. also marked \"ring certainty\", just half circle .","code":""},{"path":[]},{"path":"https://lhdjung.github.io/naidem/reference/median_plot_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize rates of ignored NAs — median_plot_col","text":"","code":"# Example data: data <- median_table(   list(     c(0, 1, 1, 1, NA),     c(1, 1, NA),     c(1, 2, NA),     c(0, 0, NA, 0, 0),     c(1, 1, 1, 1, NA, NA),     c(1, 1, 1, 1, NA, NA, NA),     c(1, 1, 1, 1, NA, NA, NA, NA),     iris$Sepal.Length,     c(5.6, 5.7, 5.9, 6, 6.1, 6.3, 6.4, 6.6, 6.7, NA),     c(6.1, 6.3, 5.9, 6, 6.1, 6.3, 6.4, 6.6, 6.7, NA, NA, NA, NA),     c(7, 7, 7, 8, NA, NA)   ) )  data #> # A tibble: 11 × 10 #>    term  estimate certainty lower upper na_ignored na_total rate_ignored_na #>    <chr>    <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #>  1 \"\"         1   TRUE       1      1            0        1            0    #>  2 \"\"         1   TRUE       1      1            0        1            0    #>  3 \"\"         1.5 FALSE      1      2            1        1            1    #>  4 \"\"         0   TRUE       0      0            0        1            0    #>  5 \"\"         1   TRUE       1      1            0        2            0    #>  6 \"\"         1   TRUE       1      1            0        3            0    #>  7 \"\"         1   FALSE     NA     NA            1        4            0.25 #>  8 \"\"         5.8 TRUE       5.8    5.8          0        0            0    #>  9 \"\"         6.1 FALSE      6.05   6.2          1        1            1    #> 10 \"\"         6.3 FALSE      6.1    6.4          4        4            1    #> 11 \"\"         7   FALSE      7      7.5          1        2            0.5  #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl>  # See visual guide above median_plot_col(data)"},{"path":"https://lhdjung.github.io/naidem/reference/median_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate median estimates with the certainty about them — median_table","title":"Tabulate median estimates with the certainty about them — median_table","text":"median_table() computes sample median. median unknown due missing values, ignores many necessary. way, true median estimate remaining known unknown values can found, preserving much data possible. Estimates presented along lower upper bounds, number missing values ignored, etc. function can also take data frame (another list) numeric vectors. compute median element.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate median estimates with the certainty about them — median_table","text":"","code":"median_table(x, even = c(\"mean\", \"low\", \"high\"), ...)"},{"path":"https://lhdjung.github.io/naidem/reference/median_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate median estimates with the certainty about them — median_table","text":"x Vector list vectors. vector needs numeric similar. Note data frames lists, x can data frame. even Passed median2(). ... Optional arguments median2() methods. used default method.","code":""},{"path":"https://lhdjung.github.io/naidem/reference/median_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate median estimates with the certainty about them — median_table","text":"Data frame columns: term: names x elements. estimate: medians x elements, ignoring many NAs necessary. certainty: TRUE corresponding estimate certain true median, FALSE unclear due missing values. lower, upper: Bounds median. Equal certainty TRUE case, precise value known. na_ignored: number missing values ignored arrive estimate. na_total: total number missing values. rate_ignored_na: proportion missing values ignored among missing values. sum_total: total number values, missing . rate_ignored_sum: proportion missing values ignored among values, missing .","code":""},{"path":[]},{"path":"https://lhdjung.github.io/naidem/reference/median_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate median estimates with the certainty about them — median_table","text":"","code":"median_table(c(5, 23, 5, NA, 5, NA)) #> # A tibble: 1 × 10 #>   term  estimate certainty lower upper na_ignored na_total rate_ignored_na #>   <chr>    <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #> 1 \"\"           5 FALSE         5    14          1        2             0.5 #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl>  # Use a list of numeric vectors: my_list <- list(   a = 1:15,   b = c(1, 1, NA),   c = c(4, 4, NA, NA, NA, NA),   d = c(96, 24, 3, NA) )  median_table(my_list) #> # A tibble: 4 × 10 #>   term  estimate certainty lower upper na_ignored na_total rate_ignored_na #>   <chr>    <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #> 1 a            8 TRUE        8       8          0        0            0    #> 2 b            1 TRUE        1       1          0        1            0    #> 3 c            4 FALSE      NA      NA          3        4            0.75 #> 4 d           24 FALSE      13.5    60          1        1            1    #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl>  # Data frames are allowed: median_table(iris[1:4]) #> # A tibble: 4 × 10 #>   term        estimate certainty lower upper na_ignored na_total rate_ignored_na #>   <chr>          <dbl> <lgl>     <dbl> <dbl>      <int>    <int>           <dbl> #> 1 Sepal.Leng…     5.8  TRUE       5.8   5.8           0        0               0 #> 2 Sepal.Width     3    TRUE       3     3             0        0               0 #> 3 Petal.Leng…     4.35 TRUE       4.35  4.35          0        0               0 #> 4 Petal.Width     1.3  TRUE       1.3   1.3           0        0               0 #> # ℹ 2 more variables: sum_total <int>, rate_ignored_sum <dbl>"},{"path":"https://lhdjung.github.io/naidem/news/index.html","id":"naidem-0109000","dir":"Changelog","previous_headings":"","what":"naidem 0.1.0.9000","title":"naidem 0.1.0.9000","text":"Currently development.","code":""}]
